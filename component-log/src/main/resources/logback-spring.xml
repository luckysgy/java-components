<?xml version="1.0" encoding="UTF-8"?>

<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!--
   http://logback.qos.ch/manual/layouts.html
   %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
   %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
   %t:输出产生该日志事件的线程名
   %f:输出日志讯息所属的类别的类别名
   %c:输出日志讯息所属的类的全名
   %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
   %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
   %m:输出代码中指定的讯息，如log(message)中的message
   %n:输出一个换行符号
-->
<configuration>
	<springProperty name="LOG_PATH" source="logging.file.path" defaultValue="/mnt/logs/" />
	<property name="maxHistory" value="15"/>
	<property name="maxFileSize" value="100MB"/>
	<springProperty scope="context" name="appName" source="spring.application.name" defaultValue=""/>

	<!--格式化输出：%d表示日期，%-5level：日志级别从左显示5个字符宽度(%5p),%thread表示线程名(%t),
    %logger:%L 类的全路径及行号(%c:%L),%msg：日志消息，%n是换行符-->
	<property name="STDOUT_CONSOLE_LOG_PATTERN"
			  value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [${appName:-},%yellow(%-0.16X{traceId:-}),%green(%-0.16X{spanId:-})] [%yellow(%14.14t)] %green(%-40.40logger{39} %L:) %msg%n"/>
	<!-- 往文件中输出, 不能带有颜色标志, 否则会出现乱码 -->
	<property name="CONSOLE_LOG_PATTERN"
			  value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${appName:-},%-0.16X{traceId:-},%-0.16X{spanId:-}] [%14.14t] %-40.40logger{39}:%L :%msg%n"/>

<!--	<property name="STDOUT_CONSOLE_LOG_PATTERN"-->
<!--			  value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %green(%-40.40logger{39} %L:) %msg%n"/>-->
<!--	&lt;!&ndash; 往文件中输出, 不能带有颜色标志, 否则会出现乱码 &ndash;&gt;-->
<!--	<property name="CONSOLE_LOG_PATTERN"-->
<!--			  value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-40.40logger{39}:%L :%msg%n"/>-->

	<!-- DEBUG日志 输入到文件，按日期,RollingFileAppender代表滚动记录文件 -->
	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/debug.log</file>
		<!--日志文件滚动策略-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${LOG_PATH}/history/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，这里设置为50MB -->
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<append>true</append>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--日志输出格式化-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<!--onMatch="ACCEPT" 表示匹配该级别及以上 日志会被立即处理，不再经过剩余过滤器。
                onMatch="DENY" 表示不匹配该级别及以上 日志将立即被抛弃不再经过其他过滤器
                onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
                onMismatch="ACCEPT" 表示匹配该级别以下
                onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
                onMismatch="DENY" 表示不匹配该级别以下的-->
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- INFO日志 输入到文件，按日期 -->
	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/info.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/history/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<append>true</append>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<!-- 如果想 info 以上级别的日志都输出到info文件中, 则将如下两行注释掉-->
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- WARN日志 输入到文件，按日期 -->
	<appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/warn.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/history/warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 日志最大的历史 30天 -->
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<append>true</append>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- ERROR日志 输入到文件，按日期 -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/error.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/history/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<append>true</append>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>
		<!-- 设置当前日志文档输出的级别，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- rocketmq日志 -->
	<appender name="RocketmqClientAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/rocketmq_client.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/history/rocketmq_client.%d{yyyyMMdd}.%i.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder charset="UTF-8">
			<pattern>%d{yy-MM-dd.HH:mm:ss.SSS} [%-16t] %-5p %-22c{0} %X{ServiceId} - %m%n</pattern>
		</encoder>
	</appender>
	<logger name="RocketmqClient" additivity="false">
		<level value="warn" />
		<appender-ref ref="RocketmqClientAppender"/>
	</logger>

	<!-- 控制台打印 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${STDOUT_CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>debug</level>
		</filter>
	</appender>

	<!--日志打印的包的范围，用来设置某一个包或具体的某一个类的日志打印级别 -->
	<!--    <logger name="org.springframework" level="INFO"/>-->

	<!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
	<!--    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>-->
	<!--    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG"/>-->
	<!--    <logger name="org.hibernate.SQL" level="DEBUG"/>-->
	<!--    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG"/>-->
	<!--    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG"/>-->

	<!--myibatis log configure-->
	<!--    <logger name="com.apache.ibatis" level="TRACE"/>-->
	<!--    <logger name="java.sql.Connection" level="DEBUG"/>-->
	<!--    <logger name="java.sql.Statement" level="DEBUG"/>-->
	<!--    <logger name="java.sql.PreparedStatement" level="DEBUG"/>-->

	<!--控制台和日志文件输出级别,此处表示把>=INFO级别的日志都输出到下列配置文件,它是根loger,是所有<loger>的上级-->
	<root level="INFO">
		<appender-ref ref="DEBUG"/>
		<appender-ref ref="INFO"/>
		<appender-ref ref="WARN"/>
		<appender-ref ref="ERROR"/>
		<appender-ref ref="STDOUT"/>
	</root>

</configuration>
